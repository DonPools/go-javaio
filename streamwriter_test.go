package javaio

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
)

type List struct {
	Value int32
	Next  *List
}

func (*List) ClassName() string {
	return "List"
}

func (*List) SerialVersionUID() int64 {
	return 1
}

func TestStreamWriter_WriteObject_1(t *testing.T) {
	list2 := &List{
		Value: 19,
	}
	list1 := &List{
		Value: 17,
		Next:  list2,
	}

	var buf bytes.Buffer
	w, err := NewStreamWriter(&buf)
	assert.NoError(t, err)
	assert.NoError(t, w.writeObject(list1))
	assert.NoError(t, w.writeObject(list2))
	assert.Equal(t, []byte{
		0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x02, 0x49, 0x00, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4c,
		0x00, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x74, 0x00, 0x06, 0x4c, 0x4c, 0x69, 0x73, 0x74, 0x3b, 0x78,
		0x70, 0x00, 0x00, 0x00, 0x11, 0x73, 0x71, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x70,
		0x71, 0x00, 0x7e, 0x00, 0x03,
	}, buf.Bytes())
}

type A struct {
	super B

	IntValue    int32
	LongValue   int64
	StringValue *String
}

type B struct {
	SerializableValue *Serializable
}

func (A) ClassName() string {
	return "A"
}

func (A) SerialVersionUID() int64 {
	return 1
}

func (a *A) Super() interface{} {
	return &a.super
}

func (B) SerialVersionUID() int64 {
	return 1
}

func (B) ClassName() string {
	return "B"
}

func TestStreamWriter_WriteObject_2(t *testing.T) {
	a := &A{
		IntValue:    42,
		LongValue:   -42,
		StringValue: &String{Value: "foo"},
	}
	a.super.SerializableValue = &Serializable{Value: a}
	var buf bytes.Buffer
	w, err := NewStreamWriter(&buf)
	assert.NoError(t, err)
	assert.NoError(t, w.WriteObject(a))
	assert.Equal(t, []byte{
		0xac, 0xed, 0x00, 0x05, 0x73, 0x72, 0x00, 0x01, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x02, 0x00, 0x03, 0x49, 0x00, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4a,
		0x00, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x00, 0x0b, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x74, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76,
		0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x78, 0x72,
		0x00, 0x01, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x01, 0x4c, 0x00,
		0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
		0x75, 0x65, 0x74, 0x00, 0x16, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x69, 0x6f, 0x2f, 0x53, 0x65,
		0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x3b, 0x78, 0x70, 0x71, 0x00, 0x7e,
		0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6, 0x74, 0x00,
		0x03, 0x66, 0x6f, 0x6f,
	}, buf.Bytes())
}
